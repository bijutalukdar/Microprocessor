

Microchip Technology PIC LITE Macro Assembler V1.35 build -356382666 
                                                                                               Thu Oct 22 16:18:25 2015

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	16F688
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     	;# 
    18  0001                     	;# 
    19  0002                     	;# 
    20  0003                     	;# 
    21  0004                     	;# 
    22  0005                     	;# 
    23  0007                     	;# 
    24  000A                     	;# 
    25  000B                     	;# 
    26  000C                     	;# 
    27  000E                     	;# 
    28  000E                     	;# 
    29  000F                     	;# 
    30  0010                     	;# 
    31  0011                     	;# 
    32  0012                     	;# 
    33  0013                     	;# 
    34  0014                     	;# 
    35  0015                     	;# 
    36  0016                     	;# 
    37  0017                     	;# 
    38  0018                     	;# 
    39  0019                     	;# 
    40  001A                     	;# 
    41  001E                     	;# 
    42  001F                     	;# 
    43  0081                     	;# 
    44  0085                     	;# 
    45  0087                     	;# 
    46  008C                     	;# 
    47  008E                     	;# 
    48  008F                     	;# 
    49  0090                     	;# 
    50  0091                     	;# 
    51  0095                     	;# 
    52  0095                     	;# 
    53  0096                     	;# 
    54  0096                     	;# 
    55  0097                     	;# 
    56  0098                     	;# 
    57  0099                     	;# 
    58  009A                     	;# 
    59  009A                     	;# 
    60  009B                     	;# 
    61  009C                     	;# 
    62  009D                     	;# 
    63  009E                     	;# 
    64  009F                     	;# 
    65                           
    66                           	psect	idataBANK0
    67  06E4                     __pidataBANK0:	
    68                           
    69                           ;initializer for _ReadOrProcess
    70  06E4  3401               	retlw	1
    71                           
    72                           ;initializer for _slave_state
    73  06E5  3401               	retlw	1
    74                           
    75                           	psect	nvBANK0
    76  002F                     __pnvBANK0:	
    77  002F                     _adc_read:	
    78  002F                     	ds	2
    79  001F                     _ADCON0	set	31
    80  001F                     _ADCON0bits	set	31
    81  001E                     _ADRESH	set	30
    82  0019                     _CMCON0	set	25
    83  0007                     _PORTC	set	7
    84  0007                     _PORTCbits	set	7
    85  009F                     _ADCON1	set	159
    86  009E                     _ADRESL	set	158
    87  0091                     _ANSEL	set	145
    88  008F                     _OSCCON	set	143
    89  0085                     _TRISA	set	133
    90  0087                     _TRISC	set	135
    91                           
    92                           ; #config settings
    93  0000                     
    94                           	psect	cinit
    95  07F0                     start_initialization:	
    96  07F0                     __initialization:	
    97                           
    98                           ; Clear objects allocated to BANK0
    99  07F0  01A9               	clrf	__pbssBANK0& (0+127)
   100  07F1  01AA               	clrf	(__pbssBANK0+1)& (0+127)
   101  07F2  01AB               	clrf	(__pbssBANK0+2)& (0+127)
   102  07F3  01AC               	clrf	(__pbssBANK0+3)& (0+127)
   103  07F4  01AD               	clrf	(__pbssBANK0+4)& (0+127)
   104  07F5  01AE               	clrf	(__pbssBANK0+5)& (0+127)
   105                           
   106                           ; Initialize objects allocated to BANK0
   107  07F6  118A  26E4  118A   	fcall	__pidataBANK0	;fetch initializer
   108  07F9  00B1               	movwf	__pdataBANK0& (0+127)
   109  07FA  118A  26E5         	fcall	__pidataBANK0+1	;fetch initializer
   110  07FC  00B2               	movwf	(__pdataBANK0+1)& (0+127)
   111  07FD                     end_of_initialization:	
   112                           ;End of C runtime variable initialization code
   113                           
   114  07FD                     __end_of__initialization:	
   115  07FD  0183               	clrf	3
   116  07FE  118A  2EF9         	ljmp	_main	;jump to C main() function
   117                           
   118                           	psect	bssBANK0
   119  0029                     __pbssBANK0:	
   120  0029                     Readadc@adcval:	
   121  0029                     	ds	2
   122  002B                     _time_out:	
   123  002B                     	ds	2
   124  002D                     Readadc@adc_state:	
   125  002D                     	ds	1
   126  002E                     _master_cmd:	
   127  002E                     	ds	1
   128                           
   129                           	psect	dataBANK0
   130  0031                     __pdataBANK0:	
   131  0031                     _ReadOrProcess:	
   132  0031                     	ds	1
   133  0032                     _slave_state:	
   134  0032                     	ds	1
   135                           
   136                           	psect	cstackCOMMON
   137  0070                     __pcstackCOMMON:	
   138  0070                     ?_SYS_INIT:	
   139  0070                     ??_SYS_INIT:	
   140                           ; 0 bytes @ 0x0
   141                           
   142  0070                     ?_slave_state_machine:	
   143                           ; 0 bytes @ 0x0
   144                           
   145  0070                     ?_slave_response:	
   146                           ; 0 bytes @ 0x0
   147                           
   148  0070                     ?_Readadc:	
   149                           ; 1 bytes @ 0x0
   150                           
   151  0070                     SYS_INIT@adc_read:	
   152                           ; 2 bytes @ 0x0
   153                           
   154                           
   155                           ; 2 bytes @ 0x0
   156  0070                     	ds	2
   157  0072                     ??_slave_response:	
   158  0072                     ??_Readadc:	
   159                           ; 0 bytes @ 0x2
   160                           
   161                           
   162                           ; 0 bytes @ 0x2
   163  0072                     	ds	3
   164  0075                     slave_response@command:	
   165                           
   166                           ; 1 bytes @ 0x5
   167  0075                     	ds	1
   168  0076                     slave_response@array:	
   169                           
   170                           ; 4 bytes @ 0x6
   171  0076                     	ds	4
   172  007A                     slave_response@prev_level:	
   173                           
   174                           ; 1 bytes @ 0xA
   175  007A                     	ds	1
   176  007B                     slave_response@state:	
   177                           
   178                           ; 1 bytes @ 0xB
   179  007B                     	ds	1
   180  007C                     slave_response@counter:	
   181                           
   182                           ; 1 bytes @ 0xC
   183  007C                     	ds	1
   184  007D                     ??_slave_state_machine:	
   185                           
   186                           ; 0 bytes @ 0xD
   187  007D                     	ds	1
   188  007E                     ??_main:	
   189                           
   190                           	psect	cstackBANK0
   191  0020                     __pcstackBANK0:	
   192                           ; 0 bytes @ 0xE
   193                           
   194  0020                     ?_main:	
   195  0020                     main@argc:	
   196                           ; 2 bytes @ 0x0
   197                           
   198                           
   199                           ; 2 bytes @ 0x0
   200  0020                     	ds	2
   201  0022                     main@argv:	
   202                           
   203                           ; 2 bytes @ 0x2
   204  0022                     	ds	2
   205  0024                     main@time_out:	
   206                           
   207                           ; 2 bytes @ 0x4
   208  0024                     	ds	2
   209  0026                     main@adcval:	
   210                           
   211                           ; 2 bytes @ 0x6
   212  0026                     	ds	2
   213  0028                     main@value:	
   214                           
   215                           ; 1 bytes @ 0x8
   216  0028                     	ds	1
   217                           
   218                           	psect	maintext
   219  06F9                     __pmaintext:	
   220 ;;
   221 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   222 ;;
   223 ;; *************** function _main *****************
   224 ;; Defined at:
   225 ;;		line 36 in file "main.c"
   226 ;; Parameters:    Size  Location     Type
   227 ;;  argc            2    0[BANK0 ] int 
   228 ;;  argv            2    2[BANK0 ] PTR PTR unsigned char 
   229 ;; Auto vars:     Size  Location     Type
   230 ;;  adcval          2    6[BANK0 ] unsigned int 
   231 ;;  time_out        2    4[BANK0 ] unsigned int 
   232 ;;  value           1    8[BANK0 ] unsigned char 
   233 ;; Return value:  Size  Location     Type
   234 ;;                  2    0[BANK0 ] int 
   235 ;; Registers used:
   236 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   237 ;; Tracked objects:
   238 ;;		On entry : B00/0
   239 ;;		On exit  : 0/0
   240 ;;		Unchanged: 0/0
   241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   242 ;;      Params:         0       4       0       0
   243 ;;      Locals:         0       5       0       0
   244 ;;      Temps:          0       0       0       0
   245 ;;      Totals:         0       9       0       0
   246 ;;Total ram usage:        9 bytes
   247 ;; Hardware stack levels required when called:    3
   248 ;; This function calls:
   249 ;;		_Readadc
   250 ;;		_SYS_INIT
   251 ;;		_slave_state_machine
   252 ;; This function is called by:
   253 ;;		Startup code after reset
   254 ;; This function uses a non-reentrant model
   255 ;;
   256                           
   257                           
   258                           ;psect for function _main
   259  06F9                     _main:	
   260                           
   261                           ;main.c: 37: unsigned int time_out = 0 ;
   262                           
   263                           ;incstack = 0
   264                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   265  06F9  1283               	bcf	3,5	;RP0=0, select bank0
   266  06FA  1303               	bcf	3,6	;RP1=0, select bank0
   267  06FB  01A4               	clrf	main@time_out
   268  06FC  01A5               	clrf	main@time_out+1
   269                           
   270                           ;main.c: 38: unsigned int adcval = 0 ;
   271  06FD  01A6               	clrf	main@adcval
   272  06FE  01A7               	clrf	main@adcval+1
   273                           
   274                           ;main.c: 39: unsigned char value=0;
   275  06FF  01A8               	clrf	main@value
   276                           
   277                           ;main.c: 40: SYS_INIT();
   278  0700  118A  26E6  118A   	fcall	_SYS_INIT
   279  0703                     l808:	
   280                           ;main.c: 41: while(1){
   281                           
   282                           
   283                           ;main.c: 42: adc_read = Readadc();
   284  0703  118A  2710  118A   	fcall	_Readadc
   285  0706  0871               	movf	?_Readadc+1,w
   286  0707  1283               	bcf	3,5	;RP0=0, select bank0
   287  0708  1303               	bcf	3,6	;RP1=0, select bank0
   288  0709  00B0               	movwf	_adc_read+1
   289  070A  0870               	movf	?_Readadc,w
   290  070B  00AF               	movwf	_adc_read
   291                           
   292                           ;main.c: 43: slave_state_machine();
   293  070C  118A  2731  118A   	fcall	_slave_state_machine
   294  070F  2F03               	goto	l808
   295  0710                     __end_of_main:	
   296                           ;main.c: 44: }
   297                           ;main.c: 45: return (0);
   298                           ;	Return value of _main is never used
   299                           
   300                           
   301                           	psect	text1
   302  0731                     __ptext1:	
   303 ;; *************** function _slave_state_machine *****************
   304 ;; Defined at:
   305 ;;		line 47 in file "main.c"
   306 ;; Parameters:    Size  Location     Type
   307 ;;		None
   308 ;; Auto vars:     Size  Location     Type
   309 ;;		None
   310 ;; Return value:  Size  Location     Type
   311 ;;		None               void
   312 ;; Registers used:
   313 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   314 ;; Tracked objects:
   315 ;;		On entry : 0/0
   316 ;;		On exit  : 0/0
   317 ;;		Unchanged: 0/0
   318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   319 ;;      Params:         0       0       0       0
   320 ;;      Locals:         0       0       0       0
   321 ;;      Temps:          1       0       0       0
   322 ;;      Totals:         1       0       0       0
   323 ;;Total ram usage:        1 bytes
   324 ;; Hardware stack levels used:    1
   325 ;; Hardware stack levels required when called:    2
   326 ;; This function calls:
   327 ;;		_slave_response
   328 ;; This function is called by:
   329 ;;		_main
   330 ;; This function uses a non-reentrant model
   331 ;;
   332                           
   333                           
   334                           ;psect for function _slave_state_machine
   335  0731                     _slave_state_machine:	
   336                           
   337                           ;main.c: 49: switch(slave_state)
   338                           
   339                           ;incstack = 0
   340                           ; Regs used in _slave_state_machine: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   341  0731  2F6A               	goto	l802
   342  0732                     l778:	
   343                           ;main.c: 50: {
   344                           ;main.c: 51: case 1 :
   345                           
   346                           
   347                           ;main.c: 52: TRISC = 0b00011111;
   348  0732  301F               	movlw	31
   349  0733  1683               	bsf	3,5	;RP0=1, select bank1
   350  0734  1303               	bcf	3,6	;RP1=0, select bank1
   351  0735  0087               	movwf	7	;volatile
   352                           
   353                           ;main.c: 53: if(PORTCbits.RC4 == 0 )
   354  0736  1283               	bcf	3,5	;RP0=0, select bank0
   355  0737  1303               	bcf	3,6	;RP1=0, select bank0
   356  0738  1A07               	btfsc	7,4	;volatile
   357  0739  2F3D               	goto	l784
   358                           
   359                           ;main.c: 54: {
   360                           ;main.c: 55: slave_state = 1 ;
   361  073A  01B2               	clrf	_slave_state
   362  073B  0AB2               	incf	_slave_state,f
   363                           
   364                           ;main.c: 56: }
   365  073C  0008               	return
   366  073D                     l784:	
   367                           
   368                           ;main.c: 57: else
   369                           ;main.c: 58: {
   370                           ;main.c: 59: if(ReadOrProcess == 1)
   371  073D  0331               	decf	_ReadOrProcess,w
   372  073E  1D03               	btfss	3,2
   373  073F  2F45               	goto	l788
   374                           
   375                           ;main.c: 60: slave_state = 2 ;
   376  0740  3002               	movlw	2
   377  0741  00FD               	movwf	??_slave_state_machine
   378  0742  087D               	movf	??_slave_state_machine,w
   379  0743  00B2               	movwf	_slave_state
   380  0744  0008               	return
   381  0745                     l788:	
   382                           
   383                           ;main.c: 61: else
   384                           ;main.c: 62: slave_state = 3 ;
   385  0745  3003               	movlw	3
   386  0746  00FD               	movwf	??_slave_state_machine
   387  0747  087D               	movf	??_slave_state_machine,w
   388  0748  00B2               	movwf	_slave_state
   389                           
   390                           ;main.c: 63: }
   391                           ;main.c: 64: break;
   392  0749  0008               	return
   393  074A                     l69:	
   394                           ;main.c: 65: case 2 :
   395                           
   396                           
   397                           ;main.c: 66: if(PORTCbits.RC4 == 0 )
   398  074A  1A07               	btfsc	7,4	;volatile
   399  074B  2F50               	goto	l794
   400                           
   401                           ;main.c: 67: {
   402                           ;main.c: 68: ReadOrProcess = 0 ;
   403  074C  01B1               	clrf	_ReadOrProcess
   404                           
   405                           ;main.c: 69: slave_state = 1 ;
   406  074D  01B2               	clrf	_slave_state
   407  074E  0AB2               	incf	_slave_state,f
   408                           
   409                           ;main.c: 70: }
   410  074F  0008               	return
   411  0750                     l794:	
   412                           
   413                           ;main.c: 71: else
   414                           ;main.c: 72: {
   415                           ;main.c: 73: master_cmd = (unsigned char)PORTC ;
   416  0750  0807               	movf	7,w	;volatile
   417  0751  00FD               	movwf	??_slave_state_machine
   418  0752  087D               	movf	??_slave_state_machine,w
   419  0753  00AE               	movwf	_master_cmd
   420                           
   421                           ;main.c: 74: master_cmd = master_cmd & 0x0f;
   422  0754  082E               	movf	_master_cmd,w
   423  0755  390F               	andlw	15
   424  0756  00FD               	movwf	??_slave_state_machine
   425  0757  087D               	movf	??_slave_state_machine,w
   426  0758  00AE               	movwf	_master_cmd
   427                           
   428                           ;main.c: 75: slave_state = 2 ;
   429  0759  3002               	movlw	2
   430  075A  00FD               	movwf	??_slave_state_machine
   431  075B  087D               	movf	??_slave_state_machine,w
   432  075C  00B2               	movwf	_slave_state
   433                           
   434                           ;main.c: 76: }
   435                           ;main.c: 77: break;
   436  075D  0008               	return
   437  075E                     l800:	
   438                           ;main.c: 78: case 3 :
   439                           
   440                           
   441                           ;main.c: 79: slave_state = slave_response(master_cmd);
   442  075E  082E               	movf	_master_cmd,w
   443  075F  118A  2778         	fcall	_slave_response
   444  0761  00FD               	movwf	??_slave_state_machine
   445  0762  087D               	movf	??_slave_state_machine,w
   446  0763  1283               	bcf	3,5	;RP0=0, select bank0
   447  0764  1303               	bcf	3,6	;RP1=0, select bank0
   448  0765  00B2               	movwf	_slave_state
   449                           
   450                           ;main.c: 80: break;
   451  0766  0008               	return
   452  0767                     l73:	
   453                           ;main.c: 81: default :
   454                           
   455                           
   456                           ;main.c: 82: slave_state = 1;
   457  0767  01B2               	clrf	_slave_state
   458  0768  0AB2               	incf	_slave_state,f
   459                           
   460                           ;main.c: 83: }
   461  0769  0008               	return
   462  076A                     l802:	
   463  076A  1283               	bcf	3,5	;RP0=0, select bank0
   464  076B  1303               	bcf	3,6	;RP1=0, select bank0
   465  076C  0832               	movf	_slave_state,w
   466                           
   467                           ; Switch size 1, requested type "space"
   468                           ; Number of cases is 3, Range of values is 1 to 3
   469                           ; switch strategies available:
   470                           ; Name         Instructions Cycles
   471                           ; simple_byte           10     6 (average)
   472                           ; direct_byte           16    10 (fixed)
   473                           ; jumptable            263     9 (fixed)
   474                           ;	Chosen strategy is simple_byte
   475  076D  3A01               	xorlw	1	; case 1
   476  076E  1903               	skipnz
   477  076F  2F32               	goto	l778
   478  0770  3A03               	xorlw	3	; case 2
   479  0771  1903               	skipnz
   480  0772  2F4A               	goto	l69
   481  0773  3A01               	xorlw	1	; case 3
   482  0774  1903               	skipnz
   483  0775  2F5E               	goto	l800
   484  0776  2F67               	goto	l73
   485  0777  0008               	return
   486  0778                     __end_of_slave_state_machine:	
   487                           
   488                           	psect	text2
   489  0778                     __ptext2:	
   490 ;; *************** function _slave_response *****************
   491 ;; Defined at:
   492 ;;		line 101 in file "main.c"
   493 ;; Parameters:    Size  Location     Type
   494 ;;  command         1    wreg     unsigned char 
   495 ;; Auto vars:     Size  Location     Type
   496 ;;  command         1    5[COMMON] unsigned char 
   497 ;;  array           4    6[COMMON] unsigned char [4]
   498 ;;  counter         1   12[COMMON] unsigned char 
   499 ;;  state           1   11[COMMON] unsigned char 
   500 ;;  prev_level      1   10[COMMON] unsigned char 
   501 ;; Return value:  Size  Location     Type
   502 ;;                  1    wreg      unsigned char 
   503 ;; Registers used:
   504 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   505 ;; Tracked objects:
   506 ;;		On entry : 0/0
   507 ;;		On exit  : 0/0
   508 ;;		Unchanged: 0/0
   509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   510 ;;      Params:         0       0       0       0
   511 ;;      Locals:         8       0       0       0
   512 ;;      Temps:          3       0       0       0
   513 ;;      Totals:        11       0       0       0
   514 ;;Total ram usage:       11 bytes
   515 ;; Hardware stack levels used:    1
   516 ;; Hardware stack levels required when called:    1
   517 ;; This function calls:
   518 ;;		_SYS_INIT
   519 ;; This function is called by:
   520 ;;		_slave_state_machine
   521 ;; This function uses a non-reentrant model
   522 ;;
   523                           
   524                           
   525                           ;psect for function _slave_response
   526  0778                     _slave_response:	
   527                           
   528                           ;incstack = 0
   529                           ; Regs used in _slave_response: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   530                           ;slave_response@command stored from wreg
   531  0778  00F5               	movwf	slave_response@command
   532                           
   533                           ;main.c: 103: unsigned char counter = 0;
   534  0779  01FC               	clrf	slave_response@counter
   535                           
   536                           ;main.c: 104: unsigned char array[4];
   537                           ;main.c: 105: unsigned char state;
   538                           ;main.c: 106: unsigned char prev_level;
   539                           ;main.c: 107: switch(command)
   540  077A  2FE3               	goto	l756
   541  077B                     l700:	
   542                           ;main.c: 108: {
   543                           ;main.c: 109: case 0x0:
   544                           
   545                           
   546                           ;main.c: 110: SYS_INIT();
   547  077B  118A  26E6  118A   	fcall	_SYS_INIT
   548  077E                     l710:	
   549                           ;main.c: 123: case 0x1:
   550                           
   551                           ;main.c: 121: }
   552                           ;main.c: 122: break;
   553                           
   554                           ;main.c: 120: ReadOrProcess = 1 ;
   555                           
   556                           ;main.c: 117: else
   557                           ;main.c: 118: {
   558                           ;main.c: 119: state = 1;
   559                           
   560                           ;main.c: 116: }
   561                           
   562                           ;main.c: 114: {
   563                           ;main.c: 115: PORTC = 0x0E & 0x0f;
   564                           
   565                           ;main.c: 113: if(PORTCbits.RC4 == 1)
   566                           
   567                           ;main.c: 112: state = 3 ;
   568                           
   569                           ;main.c: 111: TRISC = 0b00010000;
   570                           
   571                           
   572                           ;main.c: 125: TRISC = 0b00010000;
   573  077E  3010               	movlw	16
   574  077F  1683               	bsf	3,5	;RP0=1, select bank1
   575  0780  1303               	bcf	3,6	;RP1=0, select bank1
   576  0781  0087               	movwf	7	;volatile
   577                           
   578                           ;main.c: 126: state = 3 ;
   579  0782  3003               	movlw	3
   580  0783  00F2               	movwf	??_slave_response
   581  0784  0872               	movf	??_slave_response,w
   582  0785  00FB               	movwf	slave_response@state
   583                           
   584                           ;main.c: 127: if(PORTCbits.RC4 == 1)
   585  0786  1283               	bcf	3,5	;RP0=0, select bank0
   586  0787  1303               	bcf	3,6	;RP1=0, select bank0
   587  0788  1E07               	btfss	7,4	;volatile
   588  0789  2FDE               	goto	L2
   589                           
   590                           ;main.c: 128: {
   591                           ;main.c: 129: PORTC = 0x0E & 0x0f;
   592  078A  300E               	movlw	14
   593  078B  0087               	movwf	7	;volatile
   594                           
   595                           ;main.c: 130: }
   596  078C  2FEE               	goto	l758
   597  078D                     l716:	
   598                           ;main.c: 137: case 0x2:
   599                           
   600                           ;main.c: 135: }
   601                           ;main.c: 136: break ;
   602                           
   603                           ;main.c: 134: ReadOrProcess = 1 ;
   604                           
   605                           ;main.c: 131: else
   606                           ;main.c: 132: {
   607                           ;main.c: 133: state = 1;
   608                           
   609                           
   610                           ;main.c: 138: TRISC = 0b00010000;
   611  078D  3010               	movlw	16
   612  078E  1683               	bsf	3,5	;RP0=1, select bank1
   613  078F  1303               	bcf	3,6	;RP1=0, select bank1
   614  0790  0087               	movwf	7	;volatile
   615                           
   616                           ;main.c: 139: array[0] = (unsigned char)(adc_read & 0x000f);
   617  0791  1283               	bcf	3,5	;RP0=0, select bank0
   618  0792  1303               	bcf	3,6	;RP1=0, select bank0
   619  0793  082F               	movf	_adc_read,w
   620  0794  390F               	andlw	15
   621  0795  00F2               	movwf	??_slave_response
   622  0796  0872               	movf	??_slave_response,w
   623  0797  00F6               	movwf	slave_response@array
   624                           
   625                           ;main.c: 140: array[1] = (unsigned char)((adc_read & 0x00f0)>> 4);
   626  0798  0830               	movf	_adc_read+1,w
   627  0799  00F3               	movwf	??_slave_response+1
   628  079A  082F               	movf	_adc_read,w
   629  079B  00F2               	movwf	??_slave_response
   630  079C  3004               	movlw	4
   631  079D                     u155:	
   632  079D  1003               	clrc
   633  079E  0CF3               	rrf	??_slave_response+1,f
   634  079F  0CF2               	rrf	??_slave_response,f
   635  07A0  3EFF               	addlw	-1
   636  07A1  1D03               	skipz
   637  07A2  2F9D               	goto	u155
   638  07A3  0872               	movf	??_slave_response,w
   639  07A4  390F               	andlw	15
   640  07A5  00F4               	movwf	??_slave_response+2
   641  07A6  0874               	movf	??_slave_response+2,w
   642  07A7  00F7               	movwf	slave_response@array+1
   643                           
   644                           ;main.c: 141: array[2] = (unsigned char)((adc_read & 0x0300)>>8);
   645  07A8  0830               	movf	_adc_read+1,w
   646  07A9  3903               	andlw	3
   647  07AA  00F2               	movwf	??_slave_response
   648  07AB  0872               	movf	??_slave_response,w
   649  07AC  00F8               	movwf	slave_response@array+2
   650                           
   651                           ;main.c: 142: array[3] = (unsigned char) 0x0E ;
   652  07AD  300E               	movlw	14
   653  07AE  00F2               	movwf	??_slave_response
   654  07AF  0872               	movf	??_slave_response,w
   655  07B0  00F9               	movwf	slave_response@array+3
   656                           
   657                           ;main.c: 143: PORTC = (array[counter] & 0x0f) ;
   658  07B1  087C               	movf	slave_response@counter,w
   659  07B2  3E76               	addlw	(low (slave_response@array| 0))& (0+255)
   660  07B3  0084               	movwf	4
   661  07B4  0800               	movf	0,w
   662  07B5  390F               	andlw	15
   663  07B6  0087               	movwf	7	;volatile
   664  07B7                     l746:	
   665                           ;main.c: 144: while(counter < 4)
   666                           
   667  07B7  3004               	movlw	4
   668  07B8  027C               	subwf	slave_response@counter,w
   669  07B9  1803               	btfsc	3,0
   670  07BA  2FDD               	goto	l748
   671                           
   672                           ;main.c: 145: {
   673                           ;main.c: 146: if(PORTCbits.RC4 == 1)
   674  07BB  1E07               	btfss	7,4	;volatile
   675  07BC  2FC0               	goto	l730
   676                           
   677                           ;main.c: 147: {
   678                           ;main.c: 148: prev_level = 1;
   679  07BD  01FA               	clrf	slave_response@prev_level
   680  07BE  0AFA               	incf	slave_response@prev_level,f
   681                           
   682                           ;main.c: 149: }
   683  07BF  2FCF               	goto	l740
   684  07C0                     l730:	
   685                           
   686                           ;main.c: 150: else if((prev_level == 1) && (PORTCbits.RC4 == 0))
   687  07C0  037A               	decf	slave_response@prev_level,w
   688  07C1  1903               	btfsc	3,2
   689  07C2  1A07               	btfsc	7,4	;volatile
   690  07C3  2FCF               	goto	l740
   691                           
   692                           ;main.c: 151: { counter++ ;
   693  07C4  3001               	movlw	1
   694  07C5  00F2               	movwf	??_slave_response
   695  07C6  0872               	movf	??_slave_response,w
   696  07C7  07FC               	addwf	slave_response@counter,f
   697                           
   698                           ;main.c: 152: PORTC = (array[counter] & 0x0f) ;
   699  07C8  087C               	movf	slave_response@counter,w
   700  07C9  3E76               	addlw	(low (slave_response@array| 0))& (0+255)
   701  07CA  0084               	movwf	4
   702  07CB  0800               	movf	0,w
   703  07CC  390F               	andlw	15
   704  07CD  0087               	movwf	7	;volatile
   705                           
   706                           ;main.c: 153: prev_level = 0;
   707  07CE  01FA               	clrf	slave_response@prev_level
   708  07CF                     l740:	
   709                           
   710                           ;main.c: 154: }
   711                           ;main.c: 155: time_out++;
   712  07CF  3001               	movlw	1
   713  07D0  07AB               	addwf	_time_out,f
   714  07D1  1803               	skipnc
   715  07D2  0AAC               	incf	_time_out+1,f
   716  07D3  3000               	movlw	0
   717  07D4  07AC               	addwf	_time_out+1,f
   718                           
   719                           ;main.c: 156: if(time_out > 0xfffe)
   720  07D5  0A2B               	incf	_time_out,w
   721  07D6  1D03               	skipz
   722  07D7  2FB7               	goto	l746
   723  07D8  0A2C               	incf	_time_out+1,w
   724  07D9  1D03               	btfss	3,2
   725  07DA  2FB7               	goto	l746
   726                           
   727                           ;main.c: 157: {
   728                           ;main.c: 158: time_out = 0 ;
   729  07DB  01AB               	clrf	_time_out
   730  07DC  01AC               	clrf	_time_out+1
   731  07DD                     l748:	
   732                           ;main.c: 159: break;
   733                           
   734                           
   735                           ;main.c: 160: }
   736                           ;main.c: 161: }
   737                           ;main.c: 162: counter = 0;
   738  07DD  01FC               	clrf	slave_response@counter
   739  07DE                     L2:	
   740                           
   741                           ;main.c: 163: state = 1;
   742  07DE  01FB               	clrf	slave_response@state
   743  07DF  0AFB               	incf	slave_response@state,f
   744                           
   745                           ;main.c: 164: ReadOrProcess = 1;
   746  07E0  01B1               	clrf	_ReadOrProcess
   747  07E1  0AB1               	incf	_ReadOrProcess,f
   748                           
   749                           ;main.c: 166: }
   750                           
   751                           ;main.c: 165: break;
   752  07E2  2FEE               	goto	l758
   753  07E3                     l756:	
   754  07E3  0875               	movf	slave_response@command,w
   755                           
   756                           ; Switch size 1, requested type "space"
   757                           ; Number of cases is 3, Range of values is 0 to 2
   758                           ; switch strategies available:
   759                           ; Name         Instructions Cycles
   760                           ; simple_byte           10     6 (average)
   761                           ; direct_byte           13     7 (fixed)
   762                           ; jumptable            260     6 (fixed)
   763                           ;	Chosen strategy is simple_byte
   764  07E4  3A00               	xorlw	0	; case 0
   765  07E5  1903               	skipnz
   766  07E6  2F7B               	goto	l700
   767  07E7  3A01               	xorlw	1	; case 1
   768  07E8  1903               	skipnz
   769  07E9  2F7E               	goto	l710
   770  07EA  3A03               	xorlw	3	; case 2
   771  07EB  1903               	skipnz
   772  07EC  2F8D               	goto	l716
   773  07ED  2FEE               	goto	l758
   774  07EE                     l758:	
   775                           
   776                           ;main.c: 167: return(state);
   777  07EE  087B               	movf	slave_response@state,w
   778  07EF  0008               	return
   779  07F0                     __end_of_slave_response:	
   780                           
   781                           	psect	text3
   782  06E6                     __ptext3:	
   783 ;; *************** function _SYS_INIT *****************
   784 ;; Defined at:
   785 ;;		line 90 in file "main.c"
   786 ;; Parameters:    Size  Location     Type
   787 ;;		None
   788 ;; Auto vars:     Size  Location     Type
   789 ;;  adc_read        2    0[COMMON] unsigned int 
   790 ;; Return value:  Size  Location     Type
   791 ;;		None               void
   792 ;; Registers used:
   793 ;;		wreg, status,2
   794 ;; Tracked objects:
   795 ;;		On entry : 0/0
   796 ;;		On exit  : 0/0
   797 ;;		Unchanged: 0/0
   798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   799 ;;      Params:         0       0       0       0
   800 ;;      Locals:         2       0       0       0
   801 ;;      Temps:          0       0       0       0
   802 ;;      Totals:         2       0       0       0
   803 ;;Total ram usage:        2 bytes
   804 ;; Hardware stack levels used:    1
   805 ;; This function calls:
   806 ;;		Nothing
   807 ;; This function is called by:
   808 ;;		_main
   809 ;;		_slave_response
   810 ;; This function uses a non-reentrant model
   811 ;;
   812                           
   813                           
   814                           ;psect for function _SYS_INIT
   815  06E6                     _SYS_INIT:	
   816                           
   817                           ;main.c: 92: unsigned int adc_read = 0;
   818                           
   819                           ;incstack = 0
   820                           ; Regs used in _SYS_INIT: [wreg+status,2]
   821  06E6  01F0               	clrf	SYS_INIT@adc_read
   822  06E7  01F1               	clrf	SYS_INIT@adc_read+1
   823                           
   824                           ;main.c: 93: OSCCON = 0b01110001;
   825  06E8  3071               	movlw	113
   826  06E9  1683               	bsf	3,5	;RP0=1, select bank1
   827  06EA  1303               	bcf	3,6	;RP1=0, select bank1
   828  06EB  008F               	movwf	15	;volatile
   829                           
   830                           ;main.c: 94: TRISA = 0b00000100;
   831  06EC  3004               	movlw	4
   832  06ED  0085               	movwf	5	;volatile
   833                           
   834                           ;main.c: 95: ANSEL = 0b00000100;
   835  06EE  3004               	movlw	4
   836  06EF  0091               	movwf	17	;volatile
   837                           
   838                           ;main.c: 96: ADCON1 = 0b0101000;
   839  06F0  3028               	movlw	40
   840  06F1  009F               	movwf	31	;volatile
   841                           
   842                           ;main.c: 97: ADCON0 = 0b10001001;
   843  06F2  3089               	movlw	137
   844  06F3  1283               	bcf	3,5	;RP0=0, select bank0
   845  06F4  1303               	bcf	3,6	;RP1=0, select bank0
   846  06F5  009F               	movwf	31	;volatile
   847                           
   848                           ;main.c: 98: CMCON0 = 7 ;
   849  06F6  3007               	movlw	7
   850  06F7  0099               	movwf	25	;volatile
   851  06F8  0008               	return
   852  06F9                     __end_of_SYS_INIT:	
   853                           
   854                           	psect	text4
   855  0710                     __ptext4:	
   856 ;; *************** function _Readadc *****************
   857 ;; Defined at:
   858 ;;		line 12 in file "main.c"
   859 ;; Parameters:    Size  Location     Type
   860 ;;		None
   861 ;; Auto vars:     Size  Location     Type
   862 ;;		None
   863 ;; Return value:  Size  Location     Type
   864 ;;                  2    0[COMMON] int 
   865 ;; Registers used:
   866 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   867 ;; Tracked objects:
   868 ;;		On entry : 0/0
   869 ;;		On exit  : 0/0
   870 ;;		Unchanged: 0/0
   871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   872 ;;      Params:         2       0       0       0
   873 ;;      Locals:         0       0       0       0
   874 ;;      Temps:          0       0       0       0
   875 ;;      Totals:         2       0       0       0
   876 ;;Total ram usage:        2 bytes
   877 ;; Hardware stack levels used:    1
   878 ;; This function calls:
   879 ;;		Nothing
   880 ;; This function is called by:
   881 ;;		_main
   882 ;; This function uses a non-reentrant model
   883 ;;
   884                           
   885                           
   886                           ;psect for function _Readadc
   887  0710                     _Readadc:	
   888                           
   889                           ;main.c: 14: static unsigned char adc_state = 0;
   890                           ;main.c: 15: static int adcval = 0;
   891                           ;main.c: 16: switch(adc_state)
   892                           
   893                           ;incstack = 0
   894                           ; Regs used in _Readadc: [wreg-fsr0h+status,2+status,0]
   895  0710  2F22               	goto	l770
   896  0711                     l48:	
   897                           ;main.c: 17: {
   898                           ;main.c: 18: case 0:
   899                           
   900                           
   901                           ;main.c: 19: ADCON0bits.GO_DONE = 1 ;
   902  0711  149F               	bsf	31,1	;volatile
   903  0712  2F1F               	goto	l51
   904  0713                     l50:	
   905                           ;main.c: 22: case 1 :
   906                           
   907                           ;main.c: 21: break ;
   908                           
   909                           ;main.c: 20: adc_state = 1 ;
   910                           
   911                           
   912                           ;main.c: 23: if(ADCON0bits.GO_DONE == 0)
   913  0713  189F               	btfsc	31,1	;volatile
   914  0714  2F1F               	goto	l51
   915                           
   916                           ;main.c: 24: {
   917                           ;main.c: 25: adcval = ((ADRESH << 8) | ADRESL);
   918  0715  081E               	movf	30,w	;volatile
   919  0716  00AA               	movwf	Readadc@adcval+1
   920  0717  1683               	bsf	3,5	;RP0=1, select bank1
   921  0718  1303               	bcf	3,6	;RP1=0, select bank1
   922  0719  081E               	movf	30,w	;volatile
   923  071A  1283               	bcf	3,5	;RP0=0, select bank0
   924  071B  1303               	bcf	3,6	;RP1=0, select bank0
   925  071C  00A9               	movwf	Readadc@adcval
   926                           
   927                           ;main.c: 26: adc_state = 0 ;
   928  071D  01AD               	clrf	Readadc@adc_state
   929                           
   930                           ;main.c: 27: }
   931  071E  2F2C               	goto	l772
   932  071F                     l51:	
   933                           
   934                           ;main.c: 28: else
   935                           ;main.c: 29: {
   936                           ;main.c: 30: adc_state = 1 ;
   937  071F  01AD               	clrf	Readadc@adc_state
   938  0720  0AAD               	incf	Readadc@adc_state,f
   939                           
   940                           ;main.c: 33: }
   941                           
   942                           ;main.c: 31: }
   943                           ;main.c: 32: break ;
   944  0721  2F2C               	goto	l772
   945  0722                     l770:	
   946  0722  1283               	bcf	3,5	;RP0=0, select bank0
   947  0723  1303               	bcf	3,6	;RP1=0, select bank0
   948  0724  082D               	movf	Readadc@adc_state,w
   949                           
   950                           ; Switch size 1, requested type "space"
   951                           ; Number of cases is 2, Range of values is 0 to 1
   952                           ; switch strategies available:
   953                           ; Name         Instructions Cycles
   954                           ; simple_byte            7     4 (average)
   955                           ; direct_byte           11     7 (fixed)
   956                           ; jumptable            260     6 (fixed)
   957                           ;	Chosen strategy is simple_byte
   958  0725  3A00               	xorlw	0	; case 0
   959  0726  1903               	skipnz
   960  0727  2F11               	goto	l48
   961  0728  3A01               	xorlw	1	; case 1
   962  0729  1903               	skipnz
   963  072A  2F13               	goto	l50
   964  072B  2F2C               	goto	l772
   965  072C                     l772:	
   966                           
   967                           ;main.c: 34: return adcval;
   968  072C  082A               	movf	Readadc@adcval+1,w
   969  072D  00F1               	movwf	?_Readadc+1
   970  072E  0829               	movf	Readadc@adcval,w
   971  072F  00F0               	movwf	?_Readadc
   972  0730  0008               	return
   973  0731                     __end_of_Readadc:	
   974  007E                     btemp	set	126	;btemp
   975  007E                     wtemp	set	126
   976  007E                     wtemp0	set	126
   977  0080                     wtemp1	set	128
   978  0082                     wtemp2	set	130
   979  0084                     wtemp3	set	132
   980  0086                     wtemp4	set	134
   981  0088                     wtemp5	set	136
   982  007F                     wtemp6	set	127
   983  007E                     ttemp	set	126
   984  007E                     ttemp0	set	126
   985  0081                     ttemp1	set	129
   986  0084                     ttemp2	set	132
   987  0087                     ttemp3	set	135
   988  007F                     ttemp4	set	127
   989  007E                     ltemp	set	126
   990  007E                     ltemp0	set	126
   991  0082                     ltemp1	set	130
   992  0086                     ltemp2	set	134
   993  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         6
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      9      19
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_slave_state_machine
    _slave_state_machine->_slave_response
    _slave_response->_SYS_INIT

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     5      4     266
                                              0 BANK0      9     5      4
                            _Readadc
                           _SYS_INIT
                _slave_state_machine
 ---------------------------------------------------------------------------------
 (1) _slave_state_machine                                  1     1      0     262
                                             13 COMMON     1     1      0
                     _slave_response
 ---------------------------------------------------------------------------------
 (2) _slave_response                                      11    11      0     262
                                              2 COMMON    11    11      0
                           _SYS_INIT
 ---------------------------------------------------------------------------------
 (3) _SYS_INIT                                             2     2      0       1
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Readadc                                              2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Readadc
   _SYS_INIT
   _slave_state_machine
     _slave_response
       _SYS_INIT

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       5        0.0%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      9      13       3       23.8%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      21      10        0.0%
ABS                  0      0      21       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Thu Oct 22 16:18:25 2015

                          l50 0713                            l51 071F                            l48 0711  
                          l73 0767                            l69 074A                           l700 077B  
                         l710 077E                           l800 075E                           l730 07C0  
                         l802 076A                           l740 07CF                           l716 078D  
                         l808 0703                           l770 0722                           l746 07B7  
                         l772 072C                           l748 07DD                           l756 07E3  
                         l758 07EE                           l784 073D                           l794 0750  
                         l778 0732                           l788 0745                           u155 079D  
                         fsr0 0004                           indf 0000                          _main 06F9  
                        btemp 007E                          ltemp 007E                          start 0000  
                        ttemp 007E                          wtemp 007E           slave_response@array 0076  
             __end_of_Readadc 0731           slave_response@state 007B                         ?_main 0020  
               __CFG_WDTE$OFF 0000                         _ANSEL 0091                         _PORTC 0007  
                       _TRISA 0085                         _TRISC 0087                 _ReadOrProcess 0031  
                main@time_out 0024                         ltemp0 007E                         ltemp1 0082  
                       ltemp2 0086                         ltemp3 0080                         ttemp0 007E  
                       ttemp1 0081                         ttemp2 0084                         ttemp3 0087  
                       ttemp4 007F                         status 0003                         wtemp0 007E  
                       wtemp1 0080                         wtemp2 0082                         wtemp3 0084  
                       wtemp4 0086                         wtemp5 0088                         wtemp6 007F  
            __end_of_SYS_INIT 06F9           _slave_state_machine 0731                __CFG_MCLRE$OFF 0000  
             __initialization 07F0                  __end_of_main 0710                        ??_main 007E  
        ?_slave_state_machine 0070                        _ADCON0 001F                        _ADCON1 009F  
                      _ADRESH 001E                        _ADRESL 009E                        _CMCON0 0019  
                      _OSCCON 008F                     ??_Readadc 0072         ??_slave_state_machine 007D  
     __end_of__initialization 07FD                __pcstackCOMMON 0070                  __pidataBANK0 06E4  
       slave_response@command 0075         slave_response@counter 007C                     ?_SYS_INIT 0070  
                  __pbssBANK0 0029      slave_response@prev_level 007A                    __pmaintext 06F9  
                  ??_SYS_INIT 0070              Readadc@adc_state 002D                       _Readadc 0710  
                  _master_cmd 002E                       __ptext1 0731                       __ptext2 0778  
                     __ptext3 06E6                       __ptext4 0710       __size_of_slave_response 0078  
        end_of_initialization 07FD                     _PORTCbits 0007                    main@adcval 0026  
 __end_of_slave_state_machine 0778                 Readadc@adcval 0029           start_initialization 07F0  
           __size_of_SYS_INIT 0013                   __pdataBANK0 0031                _slave_response 0778  
                   ___latbits 0001                 __pcstackBANK0 0020                     __pnvBANK0 002F  
                    ?_Readadc 0070        __end_of_slave_response 07F0              SYS_INIT@adc_read 0070  
             ?_slave_response 0070                    _ADCON0bits 001F                      _SYS_INIT 06E6  
                   main@value 0028              __size_of_Readadc 0021                      _adc_read 002F  
               __size_of_main 0017                      _time_out 002B                      main@argc 0020  
                    main@argv 0022  __size_of_slave_state_machine 0047                   _slave_state 0032  
          __CFG_FOSC$INTOSCIO 0000              ??_slave_response 0072  
